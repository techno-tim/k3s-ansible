---
name: Test
on:
  workflow_call:
jobs:
  molecule:
    name: Molecule
    runs-on: self-hosted
    strategy:
      matrix:
        scenario:
          - default
          # - ipv6
          - single_node
          - calico
          - cilium
          - kube-vip
      fail-fast: false
    env:
      PYTHON_VERSION: "3.11"

    steps:
      - name: Check out the codebase
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # 4.2.2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      # these steps are necessary if not using ephemeral nodes
      - name: Delete old Vagrant box versions
        if: always() # do this even if a step before has failed
        run: vagrant box prune --force

      - name: Remove all local Vagrant boxes
        if: always() # do this even if a step before has failed
        run: if vagrant box list 2>/dev/null; then vagrant box list | cut -f 1 -d ' ' | xargs -L 1 vagrant box remove -f 2>/dev/null && echo "All Vagrant boxes removed." || echo "No Vagrant boxes found."; else echo "No Vagrant boxes found."; fi

      - name: Remove all Virtualbox VMs
        if: always() # do this even if a step before has failed
        run: VBoxManage list vms | awk -F'"' '{print $2}' | xargs -I {} VBoxManage unregistervm --delete "{}"

      - name: Remove all Virtualbox HDs
        if: always() # do this even if a step before has failed
        run: VBoxManage list hdds | awk -F':' '/^UUID:/ {print $2}' | xargs -I {} VBoxManage closemedium disk "{}" --delete

      - name: Remove all Virtualbox Networks
        if: always() # do this even if a step before has failed
        run: VBoxManage list hostonlyifs | grep '^Name:' | awk '{print $2}' | grep '^vboxnet' | xargs -I {} VBoxManage hostonlyif remove {}

      - name: Remove Virtualbox network config
        if: always() # do this even if a step before has failed
        run: sudo rm /etc/vbox/networks.conf || true

      - name: Configure VirtualBox
        run: |-
          sudo mkdir -p /etc/vbox
          cat <<EOF | sudo tee -a /etc/vbox/networks.conf > /dev/null
          * 192.168.30.0/24
          * fdad:bad:ba55::/64
          EOF

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # 5.3.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip' # caching pip dependencies

      - name: Restore vagrant Boxes cache
        uses: actions/cache/restore@1bd1e32a3bdc45362d1e726936510720a7c30a57 # 4.2.0
        with:
          path: ~/.vagrant.d/boxes
          key: vagrant-boxes-${{ hashFiles('**/molecule.yml') }}
          fail-on-cache-miss: true

      - name: Install dependencies
        run: |
          echo "::group::Upgrade pip"
          python3 -m pip install --upgrade pip
          echo "::endgroup::"

          echo "::group::Install Python requirements from requirements.txt"
          python3 -m pip install -r requirements.txt
          echo "::endgroup::"

      - name: Test with molecule
        run: molecule test --scenario-name ${{ matrix.scenario }}
        timeout-minutes: 90
        env:
          ANSIBLE_K3S_LOG_DIR: ${{ runner.temp }}/logs/k3s-ansible/${{ matrix.scenario }}
          ANSIBLE_SSH_RETRIES: 4
          ANSIBLE_TIMEOUT: 120
          PY_COLORS: 1
          ANSIBLE_FORCE_COLOR: 1

      # these steps are necessary if not using ephemeral nodes
      - name: Delete old Vagrant box versions
        if: always() # do this even if a step before has failed
        run: vagrant box prune --force

      - name: Remove all local Vagrant boxes
        if: always() # do this even if a step before has failed
        run: if vagrant box list 2>/dev/null; then vagrant box list | cut -f 1 -d ' ' | xargs -L 1 vagrant box remove -f 2>/dev/null && echo "All Vagrant boxes removed." || echo "No Vagrant boxes found."; else echo "No Vagrant boxes found."; fi

      - name: Remove all Virtualbox VMs
        if: always() # do this even if a step before has failed
        run: VBoxManage list vms | awk -F'"' '{print $2}' | xargs -I {} VBoxManage unregistervm --delete "{}"

      - name: Remove all Virtualbox HDs
        if: always() # do this even if a step before has failed
        run: VBoxManage list hdds | awk -F':' '/^UUID:/ {print $2}' | xargs -I {} VBoxManage closemedium disk "{}" --delete

      - name: Remove all Virtualbox Networks
        if: always() # do this even if a step before has failed
        run: VBoxManage list hostonlyifs | grep '^Name:' | awk '{print $2}' | grep '^vboxnet' | xargs -I {} VBoxManage hostonlyif remove {}

      - name: Remove Virtualbox network config
        if: always() # do this even if a step before has failed
        run: sudo rm /etc/vbox/networks.conf || true

      - name: Upload log files
        if: always() # do this even if a step before has failed
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # 4.4.3
        with:
          name: logs
          path: |
            ${{ runner.temp }}/logs
          overwrite: true
